// <auto-generated />
using System;
using EShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230814204347_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Günlük Laptop"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Gaming Laptop"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "İkisi Bir Arada Laptop"
                        });
                });

            modelBuilder.Entity("EShop.Models.Computer", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnRecommend")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ComputerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Computers");

                    b.HasData(
                        new
                        {
                            ComputerId = 1,
                            CategoryId = 1,
                            Description = "Lenovo Intel Core i5 1035G1 8GB 1TB Freedos FHD Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\lenovo-laptop-small.jpg",
                            ImageUrl = "\\Images\\lenovo-laptop.jpg",
                            IsOnRecommend = true,
                            Name = "Lenovo",
                            Price = 5999m
                        },
                        new
                        {
                            ComputerId = 2,
                            CategoryId = 1,
                            Description = "Asus AMD Ryzen 5 3500U 4GB 256GB SSD Freedos FHD Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\asus-laptop-small.jpg",
                            ImageUrl = "\\Images\\asus-laptop.jpg",
                            IsOnRecommend = false,
                            Name = "Asus",
                            Price = 5899m
                        },
                        new
                        {
                            ComputerId = 3,
                            CategoryId = 1,
                            Description = "HP Intel Core i5 10210U 8GB 256GB SSD MX110 Freedos Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hp-laptop-small.jpg",
                            ImageUrl = "\\Images\\hp-laptop.jpg",
                            IsOnRecommend = true,
                            Name = "Hp",
                            Price = 6148m
                        },
                        new
                        {
                            ComputerId = 4,
                            CategoryId = 1,
                            Description = "Casper Intel i5-1035G1 8GB 240GB SSD Windows 10 Home Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\casper-laptop-small.jpg",
                            ImageUrl = "\\Images\\casper-laptop.jpg",
                            IsOnRecommend = false,
                            Name = "Casper",
                            Price = 6499m
                        },
                        new
                        {
                            ComputerId = 5,
                            CategoryId = 1,
                            Description = "Apple MacBook Air Intel Core i5 5350U 8GB 128GB SSD MacOS Sierra Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\apple-laptop-small.jpg",
                            ImageUrl = "\\Images\\apple-laptop.jpg",
                            IsOnRecommend = false,
                            Name = "Apple",
                            Price = 7199m
                        },
                        new
                        {
                            ComputerId = 6,
                            CategoryId = 2,
                            Description = "Monster Intel Core i5 10300H 8GB 500GB SSD GTX1650Ti Freedos Gaming Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\monster-gaming-small.jpg",
                            ImageUrl = "\\Images\\monster-gaming.jpg",
                            IsOnRecommend = false,
                            Name = "Monster",
                            Price = 8699m
                        },
                        new
                        {
                            ComputerId = 7,
                            CategoryId = 2,
                            Description = "MSI Bravo AMD Ryzen 7 4800H 8GB 512GB SSD RX 5500M Freedos Gaming Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\msi-gaming-small.jpg",
                            ImageUrl = "\\Images\\msi-gaming.jpg",
                            IsOnRecommend = true,
                            Name = "MSI",
                            Price = 9681m
                        },
                        new
                        {
                            ComputerId = 8,
                            CategoryId = 2,
                            Description = "Acer Nitro 5 Intel Core i7 10750H 16GB 512GB SSD GTX1650Ti Freedos Gaming Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\acer-gaming-small.jpg",
                            ImageUrl = "\\Images\\acer-gaming.jpg",
                            IsOnRecommend = true,
                            Name = "Acer",
                            Price = 9999m
                        },
                        new
                        {
                            ComputerId = 9,
                            CategoryId = 2,
                            Description = "HP Pavilion AMD Ryzen 5 4600H 8GB 512GB SSD GTX 1650Ti Freedos Gaming Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hp-gaming-small.jpg",
                            ImageUrl = "\\Images\\hp-gaming.jpg",
                            IsOnRecommend = false,
                            Name = "HP",
                            Price = 8799m
                        },
                        new
                        {
                            ComputerId = 10,
                            CategoryId = 2,
                            Description = "Dell Intel Core i7 10750H 16GB 512GB SSD RTX 2060 Windows 10 Home Gaming Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\dell-gaming-small.jpg",
                            ImageUrl = "\\Images\\dell-gaming.jpg",
                            IsOnRecommend = true,
                            Name = "Dell",
                            Price = 13649m
                        },
                        new
                        {
                            ComputerId = 11,
                            CategoryId = 3,
                            Description = "Lenovo YogaIntel Core i7 10510U 8GB 512GB SSD Windows 10 Home İkisi Bir Arada Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\lenovo-2si1-small.jpg",
                            ImageUrl = "\\Images\\lenovo-2si1.jpg",
                            IsOnRecommend = true,
                            Name = "Lenovo",
                            Price = 12289m
                        },
                        new
                        {
                            ComputerId = 12,
                            CategoryId = 3,
                            Description = "HP Intel Core i5 8265U 8GB 256GB SSD Windows 10 Home İkisi Bir Arada Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hp-2si1-small.jpg",
                            ImageUrl = "\\Images\\hp-2si1.jpg",
                            IsOnRecommend = false,
                            Name = "HP",
                            Price = 12999m
                        },
                        new
                        {
                            ComputerId = 13,
                            CategoryId = 3,
                            Description = "Dell XPS13 7390 Intel Core i7 1065G7 16GB 512GB SSD Windows 10 Pro İkisi Bir Arada Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\dell-2si1-small.jpg",
                            ImageUrl = "\\Images\\dell-2si1.jpg",
                            IsOnRecommend = false,
                            Name = "Dell",
                            Price = 16099m
                        },
                        new
                        {
                            ComputerId = 14,
                            CategoryId = 3,
                            Description = "Toshiba Intel Core i7 7500U 8GB 512GB SSD Windows 10 Pro İkisi Bir Arada Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\toshiba-2si1-small.jpg",
                            ImageUrl = "\\Images\\toshiba-2si1.jpg",
                            IsOnRecommend = true,
                            Name = "Toshiba",
                            Price = 14149m
                        },
                        new
                        {
                            ComputerId = 15,
                            CategoryId = 3,
                            Description = "Asus VivoBook Intel Core i7 10750H 8GB 512GB SSD GTX 1650 Windows 10 Home İkisi Bir Arada Laptop",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\asus-2si1-small.jpg",
                            ImageUrl = "\\Images\\asus-2si1.jpg",
                            IsOnRecommend = false,
                            Name = "Asus",
                            Price = 13499m
                        });
                });

            modelBuilder.Entity("EShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ComputerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ComputerId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EShop.Models.Computer", b =>
                {
                    b.HasOne("EShop.Models.Category", "Category")
                        .WithMany("Computers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.Models.OrderDetail", b =>
                {
                    b.HasOne("EShop.Models.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("EShop.Models.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
